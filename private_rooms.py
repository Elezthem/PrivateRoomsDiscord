import asyncio
import nextcord
from nextcord.ext import commands
from nextcord.ui import Button, View, button

name_changes = {}

class PrivateRoomsView(View):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    @button(label="–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", style=nextcord.ButtonStyle.gray)
    async def close_channel(self, button: Button, interaction: nextcord.Interaction):
        user = interaction.user

        if user.voice and user.voice.channel:
            voice_channel = user.voice.channel
            overwrites = voice_channel.overwrites or {}
            role = interaction.guild.default_role
            overwrites[role] = nextcord.PermissionOverwrite(view_channel=False, connect=False)
            await voice_channel.edit(overwrites=overwrites)
            await interaction.response.send_message(f"–î–æ—Å—Ç—É–ø –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É '{voice_channel.name}' –∑–∞–∫—Ä—ã—Ç.")
        else:
            await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ –¥–æ—Å—Ç—É–ø.")

    @button(label="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", style=nextcord.ButtonStyle.gray)
    async def change_name(self, button: Button, interaction: nextcord.Interaction):
        user = interaction.user

        if user.voice and user.voice.channel:
            voice_channel = user.voice.channel

            await interaction.response.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã.")

            def check(m):
                return m.author == user and m.channel == voice_channel

            try:
                response = await self.bot.wait_for('message', check=check, timeout=60)
                new_name = response.content

                await voice_channel.edit(name=new_name)
                await interaction.response.send_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
            except asyncio.TimeoutError:
                await interaction.response.send_message("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        else:
            await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

    @button(label="–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", style=nextcord.ButtonStyle.gray)
    async def open_channel(self, button: Button, interaction: nextcord.Interaction):
        user = interaction.user

        if user.voice and user.voice.channel:
            voice_channel = user.voice.channel
            overwrites = voice_channel.overwrites or {}
            role = interaction.guild.default_role
            overwrites[role] = nextcord.PermissionOverwrite(view_channel=True, connect=True)
            await voice_channel.edit(overwrites=overwrites)
            await interaction.response.send_message(f"–î–æ—Å—Ç—É–ø –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É '{voice_channel.name}' –æ—Ç–∫—Ä—ã—Ç.")
        else:
            await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –¥–æ—Å—Ç—É–ø.")


class PrivateRooms(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def private_rooms(self, ctx):
        category = await ctx.guild.create_category('–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã')
        text_channel = await ctx.guild.create_text_channel('–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ-–∫–æ–º–Ω–∞—Ç—ã', category=category)
        voice_channel = await ctx.guild.create_voice_channel('–ø—Ä–∏–≤–∞—Ç–Ω—ã–π-–≥–æ–ª–æ—Å–æ–≤–æ–π-–∫–∞–Ω–∞–ª', category=category)

        embed = nextcord.Embed(title='–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã', description='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã!')
        embed.add_field(name='–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø', value="üîíüë•", inline=False)
        embed.add_field(name='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', value="‚úèÔ∏è", inline=False)
        embed.add_field(name='–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø', value="üîìüë•", inline=False)

        message = await text_channel.send(embed=embed, view=PrivateRoomsView(self.bot))
        await ctx.send('–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if after.channel and after.channel.name == '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π-–≥–æ–ª–æ—Å–æ–≤–æ–π-–∫–∞–Ω–∞–ª':
            channel_name = f'{member.display_name}\'s Room'
            category = after.channel.category
            new_voice_channel = await category.create_voice_channel(channel_name)
            await member.move_to(new_voice_channel)
        if before.channel and before.channel.name != '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π-–≥–æ–ª–æ—Å–æ–≤–æ–π-–∫–∞–Ω–∞–ª' and not before.channel.members:
            await before.channel.delete()

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if member.voice and member.id in name_changes:
            new_name = name_changes[member.id]
            await member.voice.channel.edit(name=new_name)
            del name_changes[member.id]

def setup(bot):
    bot.add_cog(PrivateRooms(bot))
